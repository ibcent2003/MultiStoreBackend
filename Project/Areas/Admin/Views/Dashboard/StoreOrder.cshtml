@model Project.Areas.Admin.Models.DashboardViewModel
@{
    ViewBag.Title = Model.orderType;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewBag.IsGreetings = "true";
    var db = new Project.DAL.PROEntities();

}
@section Crumbs{
    <div class="crumbs">

        <ul class="breadcrumb" id="breadcrumbs">
            <li> <i class="icon-home"></i> <a href="@Url.Action("Index", "Dashboard", new { area="Admin"})">Dashboard</a> </li>
            <li class="current"> <a title="" href="javascript: return void(0)">Product List for @Model.store.Name</a> </li>

        </ul>
    </div>
}
@section Styles {
    <link href="@Url.Content("~/Content/Backend/Custom/gritter/css/jquery.gritter.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/Backend/themes/base/jquery.ui.all.css")" rel="stylesheet" />

}
<div class="row">
    <div class="col-md-12">
        <div class="widget">
            <div class="widget-header">

                <a href="@Url.Action("OrderList", "Dashboard", new {Id=Model.store.ProcessInstaceId, area = "Admin", type=Model.orderType })" class="btn btn-xs btn-info">Back</a> 
                <div class="toolbar no-padding">
                    <div class="btn-group"><span class="btn btn-xs widget-collapse"><i class="icon-angle-down"></i></span><span class="btn btn-xs widget-refresh"><i class="icon-refresh"></i></span></div>
                </div>
            </div>
         

            <div class="widget-content">
                <table class="table table-striped table-bordered table-hover table-checkable datatable dataTable">
                    <thead>
                        <tr>

                            <th>SN</th>
                            <th>
                                Order No.
                            </th>
                           
                            

                            <th>
                                No of Items
                            </th>
                            <th>
                                Delivery Price
                            </th>
                            <th>
                                Total Payment
                            </th>
                            <th>
                                Order Date
                            </th>
                            <th>
                                Delivery Date
                            </th>
                            <th>
                                Status
                            </th>
                            <th>
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>

                        @if (Model.OrderList.Count != 0)
                        {
                           

                            int i = 0;
                            foreach (var item in Model.OrderList)
                            {
                                ++i;
                                var getcartitem = db.CartItem.Where(x => x.CartId == item.CartId).ToList();
                                <tr>
                                    <td>
                                        @i
                                    </td>
                                    <td>
                                        @item.OrderNo
                                    </td>

                                   
                                    <td>
                                        
                                        @getcartitem.Select(x => x.Quantity).Sum()
                                    </td>

                                    <td>
                                        ₦@String.Format("{0:n0}", getcartitem.Select(x => x.TotalDeliveryFee).Sum())

                                    </td>


                                    <td>
                                        @{
                                            decimal totalP = getcartitem.Select(x => x.TotalPrice).Sum();
                                            decimal totalD = getcartitem.Select(x => x.TotalDeliveryFee).Sum();
                                            decimal overall_total = totalP + totalD;

                                        }
                                        ₦@String.Format("{0:n0}", overall_total)
                                    </td>



                                    <td>
                                        @item.OrderDate.ToShortDateString()
                                    </td>
                                    <td>
                                        @item.DeliveryDate.ToShortDateString()
                                    </td>

                                    <td>
                                        @if (item.OrderStatus == "Order Placed")
                                        {
                                            <span class="label label-info"> <strong>@item.OrderStatus</strong></span>
                                        }
                                        else if (item.OrderStatus == "Paid")
                                        {
                                            <span class="label label-success"> <strong>@item.OrderStatus</strong></span>
                                        }
                                        else if (item.OrderStatus == "Cancelled")
                                        {
                                            <span class="label label-danger"> <strong>@item.OrderStatus</strong></span>
                                        }
                                        else
                                        {
                                            <span class="label label-warning"> <strong>@item.OrderStatus</strong></span>
                                        }

                                    </td>


                                    <td>
                                        @if (Model.orderType == "New Order")
                                        {
                                            var order_type = "newOrder";
                                            @Html.ActionLink("View Order", "ViewOrder", new { Id = Model.store.ProcessInstaceId, OrderNo = item.OrderNo, cId = item.CartId, type = order_type }, new { @class = "btn btn-xs btn-success" })

                                        }
                                        else if (Model.orderType == "Cancelled Order")
                                        {

                                            var order_type = "cancelledOrder";
                                            @Html.ActionLink("View Order", "ViewOrder", new { Id = Model.store.ProcessInstaceId, OrderNo = item.OrderNo, cId = item.CartId, type = order_type }, new { @class = "btn btn-xs btn-success" })

                                        }
                                        else if (Model.orderType == "Confirmed Order")
                                        {
                                            var order_type = "confirmOrder";
                                            @Html.ActionLink("View Order", "ViewOrder", new { Id = Model.store.ProcessInstaceId, OrderNo = item.OrderNo, cId = item.CartId, type = order_type }, new { @class = "btn btn-xs btn-success" })

                                        }
                                        else if (Model.orderType == "Confirmed Payment")
                                        {
                                            var order_type = "confirmPayment";
                                            @Html.ActionLink("View Order", "ViewOrder", new { Id = Model.store.ProcessInstaceId, OrderNo = item.OrderNo, cId = item.CartId, type = order_type }, new { @class = "btn btn-xs btn-success" })

                                        }
                                        else if (Model.orderType == "Payment Cancelled")
                                        {
                                            var order_type = "cancelledPayment";
                                            @Html.ActionLink("View Order", "ViewOrder", new { Id = Model.store.ProcessInstaceId, OrderNo = item.OrderNo, cId = item.CartId, type = order_type }, new { @class = "btn btn-xs btn-success" })

                                        }

                                        else if (Model.orderType == "Delivered")
                                        {
                                            var order_type = "Delivered";
                                            @Html.ActionLink("View Order", "ViewOrder", new { Id = Model.store.ProcessInstaceId, OrderNo = item.OrderNo, cId = item.CartId, type = "Delivered" }, new { @class = "btn btn-xs btn-success" })

                                        }





                                    </td>

                                </tr>

                            }


                        }
                        else
                        {
                          
                        }


                    </tbody>
                    <tfoot>
                        
                    </tfoot>
                </table>
            </div>

        </div>
    </div>

</div>


<script>
    function DeleteConfirm() {
        if (confirm("Are you sure want to remove this Category from you Store?"))
            return true;
        else
            return false;
    }

</script>

@section Scripts{
    @Scripts.Render("~/Content/Backend/plugins/datatables/jquery.dataTables.min.js")
    @Scripts.Render("~/Content/Backend/plugins/datatables/tabletools/TableTools.min.js")
    @Scripts.Render("~/Content/Backend/plugins/datatables/colvis/ColVis.min.js")
    @Scripts.Render("~/Content/Backend/plugins/datatables/DT_bootstrap.js")
    <script>
        "use strict";

    </script>
}