@model Project.Areas.Setup.Models.ProductManagementViewModel
@{
    ViewBag.Title = Model.store.Name + " Reorder Product";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewBag.IsGreetings = "true";
}

@section Crumbs{
    <div class="crumbs">

        <ul class="breadcrumb" id="breadcrumbs">
            <li><i class="icon-home"></i><a href="@Url.Action("Index", "Home", new { area = "Admin" })">Dashboard</a> </li>
            <li><i class="current"></i><a href="javascript: return void(0)">@Model.store.Name  Reorder Product</a> </li>


        </ul>
    </div>
}
<div class="row">
    <div class="col-md-12">
        <div class="widget box">
            <div class="widget-header">
                <h4><i class="icon-reorder"></i>You are reordering a product for under @Model.category.Name.ToUpper() Category :</h4> <h4 style="color:red">  Please note fileds with red * is required. </h4> <a href="@Url.Action("ProductList", "ProductManagement", new {Id=Model.store.ProcessInstaceId, CategoryId=Model.product.ProductCategoryId , area = "Setup" })" class="btn btn-xs btn-danger">Back</a>
            </div>
            <div class="widget-content">
                @using (Html.BeginForm("ReorderProduct", "ProductManagement", new { Id = Model.store.ProcessInstaceId, PId = Model.Productform.Id }, FormMethod.Post, new { @enctype = "multipart/form-data", @class = "form-horizontal row-border" }))
                {
                    @Html.HiddenFor(x => x.store.ProcessInstaceId)
                    @Html.HiddenFor(x => x.Productform.Id)
                    @Html.HiddenFor(x => x.product.ProductCategoryId)         
                    <div class="form-group">
                        @Html.Label("Product Name", new { @class = "col-md-2 control-label" })
                        <div class="col-md-6">
                          @Html.DisplayFor(m => m.product.Name, new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Brand", new { @class = "col-md-2 control-label" })
                        <div class="col-md-2">
                            @Html.DisplayFor(m => m.product.ProductBrand.Name, new { @class = "form-control" })

                        </div>
                    </div>

              
                    <div class="form-group">
                        @Html.Label("Old Quantity", new { @class = "col-md-2 control-label" })
                        <div class="col-md-2">
                            @Html.DisplayFor(m => m.product.Quantity, new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("New Quantity", new { @class = "col-md-2 control-label required" })
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.Productform.NewQuantity, new { @class = "form-control" })                           
                        </div>
                    </div>                

                    <div class="form-group">
                        @Html.Label("Sub Category", new { @class = "col-md-2 control-label" })
                        <div class="col-md-2">
                          @Html.DisplayFor(m => m.product.ProductSubCategory.Name, new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Child Category", new { @class = "col-md-2 control-label" })
                        <div class="col-md-2">
                            @Html.DisplayFor(m => m.product.ProductChildCategory.Name, new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Product Photo", new { @class = "col-md-2 control-label" })
                        <div class="col-md-6">
                            <img src="@Url.Action("DocumentsUploadedPath", new { Path = (Model.documentPath) + Model.p1 })" height="100" width="100" style="border:solid" />
                            @if (Model.p2 != null)
                            {
                                <img src="@Url.Action("DocumentsUploadedPath", new { Path = (Model.documentPath) + Model.p2 })" height="100" width="100" style="border:solid" />
                            }

                            @if (Model.p3 != null)
                            {
                                <img src="@Url.Action("DocumentsUploadedPath", new { Path = (Model.documentPath) + Model.p3 })" height="100" width="100" style="border:solid" />
                            }
                        </div>
                    </div>              
              

                    <div class="form-actions">
                        <a href="@Url.Action("ProductList", "ProductManagement", new {Id=Model.store.ProcessInstaceId,CategoryId=Model.product.ProductCategoryId, area="Setup"})" class="btn btn-success btn-xs"><< Back to List </a>
                        <input type="submit" class="btn btn-warning btn-xs pull-right" value="Save" />
                    </div>
                }
            </div>

        </div>
    </div>
</div>

@section Scripts{
    @Scripts.Render("~/Content/Backend/plugins/datatables/jquery.dataTables.min.js")
    @Scripts.Render("~/Content/Backend/plugins/datatables/tabletools/TableTools.min.js")
    @Scripts.Render("~/Content/Backend/plugins/datatables/colvis/ColVis.min.js")
    @Scripts.Render("~/Content/Backend/plugins/datatables/DT_bootstrap.js")
    @Scripts.Render("~/Content/Backend/plugins/jquery-ui/jquery-ui-1.10.2.custom.min.js")
    @Scripts.Render("~/Content/Backend/vendors/tinymce/tinymce.min.js")
    <script>
        "use strict";
        $(document).ready(function () {
            $(".datepicker-issueddate").datepicker({
                defaultDate: +7,
                showOtherMonths: true,
                autoSize: false,
                maxDate: new Date(),
                appendText: '<span class="help-block">(yyyy-mm-dd)</span>',
                dateFormat: "yy-mm-dd"
            });

        });

        function getchild(e) {
            var subcategoryId = $(e).val();

            var currentRequest = null;
            var currentRequest = $.ajax({
                url: '@Url.Action("GetChildId", "ProductManagement")',
                dataType: 'json',
                type: 'POST',
                data: { SubCategoryId: subcategoryId },
                beforeSend: function () {
                    if (currentRequest != null) {
                        currentRequest.abort();
                    }
                },
                success: function (msg) {
                    $("#Productform_ProductChildCategoryId").html("");
                    $.each(msg, function (index, element) {
                        $("#Productform_ProductChildCategoryId").append('<option  value="' + element.Value + '">' + element.Text + '</option>');
                    });
                },
                error: function (errmsg) { }
            });
        }

        function GetAllChild(e) {
            getchild(e);

        }



        tinymce.init({
            selector: "textarea",
            mode: "exact",
            elements: "newsform_NewsContent",
            theme: "modern",




            plugins: [
                "advlist autolink lists link image charmap print preview hr anchor pagebreak",
                "searchreplace wordcount visualblocks visualchars code fullscreen",
                "insertdatetime media nonbreaking save table contextmenu directionality",
                "emoticons template paste textcolor "
            ],
            toolbar1: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image",
            toolbar2: "print preview media | forecolor backcolor emoticons",
            image_advtab: true,
            templates: [
                { title: 'Test template 1', content: 'Test 1' },
                { title: 'Test template 2', content: 'Test 2' }
            ]
        });
    </script>
}
<style>
    .required:after {
        content: "*";
        font-weight: bold;
        color: red;
    }
</style>


